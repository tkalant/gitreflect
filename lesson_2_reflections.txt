What happens when you initialize a repository? Why do you need to do it?

git init (in the directory you wish to create the git repository in)
git status

You create a git repository within a directory.
Now you can start adding files from your directory to the git repository.
Once files are added to git, you can start committing changes to them, and keep track of the changes in your files.
############################################################################
How is the staging area different from the working directory and the repository? What value do you think it offers?
You add files FROM working direcotory to the staging area, before you commit them to the git repository.
Kinda like an intermediate env before you finish working with them.
Possible advantage: Keep a temp version of file in case you forget to commit
or your computer shuts down or whatever?
############################################################################
How can you use the staging area to make sure you have one commit per logical change?

Any file that has been changed can staged.
Any change that leads to a logical change, can then committed from the staging area to the git repository.

#########################################################
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

if you want to start a new experimental project on your current project
define a different mode or version of your code and what it does.
Different piece of work, or context-switching
Master How do the diagrams help you visualize the branch structure?

branch: can be the public branch, always runs and doesn't break
other branches: work in progress, dev branch, experimental branch
########################################################
How do the diagrams help you visualize the branch structure?

If you draw it out, you will have a better understanding of where you are,
and what to do not to lose any commits you make.
#########################################################
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Create a new commit, indicating the merge. 
The commit history of both branches are available on logging the merged branch.
